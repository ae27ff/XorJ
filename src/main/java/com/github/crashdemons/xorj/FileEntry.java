/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.crashdemons.xorj;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import static com.github.crashdemons.xorj.Common.stol;
import static com.github.crashdemons.xorj.Common.stoi;

/**
 *
 * @author crashdemons <crashdemons -at- github.com>
 */
public class FileEntry extends javax.swing.JPanel {
    public static File dir=null;
    public UI ui=null;
    /**
     * Creates new form FilePane
     */
    public FileEntry() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbRemove = new javax.swing.JButton();
        jtFilename = new javax.swing.JTextField();
        jtStart = new javax.swing.JTextField();
        jtEnd = new javax.swing.JTextField();
        jbLength = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setMaximumSize(new java.awt.Dimension(32767, 26));

        jbRemove.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jbRemove.setText("-");
        jbRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveActionPerformed(evt);
            }
        });

        jtFilename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtFilenameActionPerformed(evt);
            }
        });
        jtFilename.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jtFilenameInputMethodTextChanged(evt);
            }
        });

        jtStart.setText("0");
        jtStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtStartActionPerformed(evt);
            }
        });

        jtEnd.setText("0");
        jtEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtEndActionPerformed(evt);
            }
        });

        jbLength.setText("Input length...");
        jbLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLengthActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jbRemove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtFilename, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jtStart, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jtEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbLength))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jbRemove)
                .addComponent(jtFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jtStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jtEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jbLength))
        );
    }// </editor-fold>//GEN-END:initComponents
    
   
    public static long calcFileSize(String filename){
        if(filename.startsWith("byte://const/")){
            return 4294967296l;
        }else return (new File(filename)).length();
    }
    
    public String getFilename(){
        return jtFilename.getText();
    }
    public long getFilesize(){
        String filename=jtFilename.getText();
        return calcFileSize(filename);
    }
    public long getStart(){
        return stol(jtStart.getText());
    }
    public long getEnd(){
        return stol(jtEnd.getText());
    }
    
    
    private void setLength(long l){
        if(l<=0) return;
        long lstart=stol(jtStart.getText());
        long lend=lstart+(l-1);
        jtEnd.setText(String.valueOf(lend));
    }
    private long getLength(long lstart,long lend){
        long l=(lend-lstart)+1;
        if(l<0) l=0;
        return l;
    }
    private long getLength(){
        long lstart=stol(jtStart.getText());                                       
        long lend=stol(jtEnd.getText());
        return getLength(lstart,lend);
    }
    
    private void setValidPositions(){
        setValidPositions(jtFilename.getText());
    }
    
    private void setValidPositions(String filename){
        long length = calcFileSize(filename);
        long lstart=stol(jtStart.getText());                                       
        long lend=stol(jtEnd.getText());
        if(lstart<0) lstart=0;
        if(lstart>=length) lstart=length-1;
        if(lend>=length) lend=length-1;
        if(length==0) lend=0;
        jtStart.setText(String.valueOf(lstart));
        jtEnd.setText(String.valueOf(lend));
    }
    
    private void jbLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLengthActionPerformed
        long l=getLength();
        String s = (String)JOptionPane.showInputDialog(
                    this,
                    "Please input the length in bytes from the starting position",
                    "Input data length",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    String.valueOf(l));
        l = stol(s);
        setLength(l);
        setValidPositions();
    }//GEN-LAST:event_jbLengthActionPerformed

    private void jtFilenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtFilenameActionPerformed
        
    }//GEN-LAST:event_jtFilenameActionPerformed

    private void jtStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtStartActionPerformed
        
    }//GEN-LAST:event_jtStartActionPerformed

    private void jtEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtEndActionPerformed
        
    }//GEN-LAST:event_jtEndActionPerformed

    private void jtFilenameInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jtFilenameInputMethodTextChanged
        //doesn't catch text changes!
    }//GEN-LAST:event_jtFilenameInputMethodTextChanged

    private void jbRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveActionPerformed
        ui.removeFileEntry(this);
    }//GEN-LAST:event_jbRemoveActionPerformed

    public boolean setFile(String filename){
        long length = calcFileSize(filename);
        if(length==0) return false;
        jtFilename.setText(filename);
        jtEnd.setText( String.valueOf(length-1) );
        return true;
    }
    public boolean selectConstant(int n){
        String path = "byte://const/"+n;
        dir = new File(path);
        //jtFilename.setText(path);
        //jtEnd.setText("2147483647");
        //return true;
        return setFile(path);
    }
    public boolean select(){
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Binaries", "bin", "dat");
        chooser.setCurrentDirectory(dir);
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
           dir=chooser.getCurrentDirectory();//save directory for next file select;
           String path=chooser.getSelectedFile().getAbsolutePath();
           return setFile(path);
        }
        return false;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbLength;
    private javax.swing.JButton jbRemove;
    private javax.swing.JTextField jtEnd;
    private javax.swing.JTextField jtFilename;
    private javax.swing.JTextField jtStart;
    // End of variables declaration//GEN-END:variables
}
